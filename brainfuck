#!/usr/bin/env python

# Brainfuck interpreter, written in python.
# Slowly gaining features at the expense of performance.

# Author: Joe Kitchen
# This code is UNLICENSED.  The terms of the unlicense might have been
# distributed with this software; if so, they are likely to be in the
# UNLICENSE file.  If not, the text of the unlicense, as well as more
# information about it, can be found at unlicense.org.

'''brainfuck interpreter by Joe Kitchen

Usage: brainfuck SOURCE 
       brainfuck SOURCE INPUT

Global settings:

TAPESIZE controls the length of the tape.  The standard setting is
30,000, though well-behaved brainfuck programs should try not to use
more than 9,999 cells for the benefit of people playing compiler golf.

EOF controls the interpreter's behaviour when reading EOF as input.
-1 and 0 mean that the interpreter will set the cell to -1 or 0
respectively; all other values mean that the interpreter will not
change the cell value.
'''

import sys

TAPESIZE = 30000
EOF = 1

try:
    with open(sys.argv[1],"r") as srcfile:
        code = srcfile.read()
except IOError:
    code = sys.argv[1]
except IndexError:
    print "Fatal Error: Brainfuck expected a source file."
    sys.exit(1)

tape = [0]*TAPESIZE
cell = inputcell = instruction = 0
if len(sys.argv) > 2:
    try:
        with open(sys.argv[2],"r") as inputfile:
            input = inputfile.read()
    except IOError:
        input = sys.argv[2]

# Currently bracket_check() only checks that the number of [ and ] in
# the source are equal, not whether or not they are actually matched.
def bracket_check(source):
    openbnum = source.count("[")
    closebnum = source.count("]")
    if openbnum != closebnum:
        if openbnum < closebnum:
            print "Warning: unmatched ]"
        else:
            print "Warning: unmatched ["

bracket_check(code) 

def movehead(x):
    global cell
    if (cell + x) in xrange(0,TAPESIZE):
        cell += x
    else:
        print "Tape Error: head cannot move past tape boundaries."
        sys.exit(1)

def readinput():
    global inputcell
    global tape
    try:
        if inputcell < len(input):
            tape[cell] = ord(input[inputcell])
    except TypeError:
        if EOF == 0 or EOF == -1:
            tape[cell] = EOF
        else:
            pass
    inputcell += 1

while instruction < len(code):
    if code[instruction] == "+":
        tape[cell] += 1
    elif code[instruction] == "-":
        tape[cell] -= 1
    elif code[instruction] == ">":
        cell += 1
        #movehead(1)
    elif code[instruction] == "<":
        cell -=1
        #movehead(-1)
    elif code[instruction] == "[":
        if tape[cell] == 0:
            looplevel = 1
            while looplevel > 0:
                instruction += 1
                if code[instruction] == "[":
                    looplevel += 1
                elif code[instruction] == "]":
                    looplevel -= 1
    elif code[instruction] == "]":
        if tape[cell] != 0:
            looplevel = 1
            while looplevel > 0:
                instruction -= 1
                if code[instruction] == "[":
                    looplevel -= 1
                elif code[instruction] == "]":
                    looplevel += 1
    elif code[instruction] == ".":
        sys.stdout.write(chr(tape[cell]))
    elif code[instruction] == ",":
        readinput()
    else:
        pass
    instruction += 1
